@startuml
class HumanFactor {
    boolean : isFullyAnswered()
    double : getLatestAverageScore()
}
class TeamHumanFactor {
    pendiente : getImpactOrRelevance()
}
class HumanFactorType {
    String title
    String description
    boolean onlyOnce
}
class HumanFactorFactory {
    List<HumanFactor> createInstances()
}
enum Cluster
class Action {
    
}
class ActionType {
    String title
    String description
}
class Question {
    boolean : isAnswered()
    double : getLatestScore()
    void : addAnswer(Answer answer)
    Answer : getLatestAnswer()
}
class QuestionType {
    String questionText
    boolean onlyForManagement
    boolean isNegative
}
enum TypeOfAnswer
abstract class User
class Answer {
    LocalDateTime creationTime
}
class TeamMember
class TeamManager
class BibliographicSource {
    String authors
    LocalDate publicationDate
    String title
}
class Team {

}

Answer "0..*" <--*  Question
Question "1..*" <--* HumanFactor
Question -> QuestionType
TeamHumanFactor "1..*" - "0..*" Action
HumanFactorType <-- TeamHumanFactor
HumanFactor --> HumanFactor : depends on
HumanFactor -> HumanFactorType
HumanFactorType -> "1" Cluster
User <|-- TeamMember
User <|-- TeamManager
TeamMember "0..*" --* Team
TeamManager "1" -- "1" Team
Team *-> TeamHumanFactor
ActionType -> BibliographicSource
Action -> ActionType
HumanFactorType --> "0..*" BibliographicSource
HumanFactorType -> HumanFactorType : depends on
QuestionType <--* HumanFactorType
HumanFactorType *--> ActionType
TypeOfAnswer "1" <-- QuestionType
User *-> HumanFactor
HumanFactorFactory *--> HumanFactorType
@enduml